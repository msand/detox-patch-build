apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def _ext = rootProject.ext

def _compileSdkVersion = _ext.has('compileSdkVersion') ? _ext.compileSdkVersion : 25
def _buildToolsVersion = _ext.has('buildToolsVersion') ? _ext.buildToolsVersion : '27.0.3'
def _minSdkVersion = _ext.has('minSdkVersion') ? _ext.minSdkVersion : 18
def _targetSdkVersion = _ext.has('targetSdkVersion') ? _ext.targetSdkVersion : 25
def _kotlinVersion = _ext.has('detoxKotlinVersion') ? _ext.detoxKotlinVersion : '1.3.0'

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion
    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    productFlavors {
        flavorDimensions "minReactNative"
        minReactNative44 {
            dimension "minReactNative"

        }
        minReactNative46 {
            dimension "minReactNative"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true

        unitTests.all { t ->
            reports {
                html.enabled true
            }
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "      ${result.resultType} (${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)     "
                    def repeatLength = output.length()
                    println '\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength) + '\n'

                    println "see report at file://${t.reports.html.destination}/index.html"
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$_kotlinVersion"

    minReactNative44Implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    minReactNative44Implementation 'com.squareup.okhttp3:okhttp-ws:3.4.1'

    minReactNative46Implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    minReactNative46Implementation 'com.squareup.okio:okio:1.13.0'

    implementation('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.google.code.findbugs'
    })
    implementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.android.support.test:rules:1.0.2'

    // noinspection GradleDynamicVersion
    compileOnly "com.facebook.react:react-native:+"

    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    testImplementation 'org.json:json:20140107'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'org.apache.commons:commons-io:1.3.2'
    testImplementation 'com.nhaarman:mockito-kotlin:1.4.0'
    // noinspection GradleDynamicVersion
    testImplementation "com.facebook.react:react-native:+"
}
